import torch

from bspline.bspline_v2 import bspline_v2


def spline2_eval(x, y, c, d, knots_x, knots_y):
    x_size = x.size()

    if min(x_size) > 1:
        xs = x[0, :]
        ys = y[:, 0].view(-1)

        x2, y2 = torch.meshgrid(xs, ys, indexing='xy')
        assert torch.all(x2.flatten() == x.flatten()) and torch.all(
            y2.flatten() == y.flatten()), 'x and y should be generated by meshgrid'

        gridded = True
    else:
        xs = x.view(-1)
        ys = y.view(-1)
        gridded = False

    xmin = knots_x[0]
    xmax = knots_x[-1]
    tx = torch.cat((x.new_full((1, d), xmin), knots_x.view(1, -1), x.new_full((1, d), xmax)), dim=1)

    ymin = knots_y[0]
    ymax = knots_y[-1]
    ty = torch.cat((x.new_full((1, d), ymin), knots_y.view(1, -1), x.new_full((1, d), ymax)), dim=1)

    nc_x = len(knots_x) + d - 1
    nc_y = len(knots_y) + d - 1

    bspline_x = bspline_v2(xs, nc_x, d, tx)[0]
    bspline_y = bspline_v2(ys, nc_y, d, ty)[0]

    if gridded:
        z = bspline_x @ c.view(nc_y, nc_x).T @ bspline_y.T
    else:
        z = ((bspline_x @ c.view(nc_y, nc_x).T) * bspline_y).sum(dim=1)
        z = z.view(x_size)

    return z
